// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	usecase "team-management/members/usecase"

	mock "github.com/stretchr/testify/mock"
)

// UpdateMemberUseCase is an autogenerated mock type for the UpdateMemberUseCase type
type UpdateMemberUseCase struct {
	mock.Mock
}

// Handle provides a mock function with given fields: id, input
func (_m *UpdateMemberUseCase) Handle(id string, input *usecase.UpdateMemberInput) (*usecase.UpdateMemberOutput, error) {
	ret := _m.Called(id, input)

	var r0 *usecase.UpdateMemberOutput
	if rf, ok := ret.Get(0).(func(string, *usecase.UpdateMemberInput) *usecase.UpdateMemberOutput); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.UpdateMemberOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *usecase.UpdateMemberInput) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUpdateMemberUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUpdateMemberUseCase creates a new instance of UpdateMemberUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUpdateMemberUseCase(t mockConstructorTestingTNewUpdateMemberUseCase) *UpdateMemberUseCase {
	mock := &UpdateMemberUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
