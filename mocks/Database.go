// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Create provides a mock function with given fields: content
func (_m *Database) Create(content interface{}) (string, error) {
	ret := _m.Called(content)

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: fieldName, fieldVale
func (_m *Database) Delete(fieldName string, fieldVale string) (bool, error) {
	ret := _m.Called(fieldName, fieldVale)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(fieldName, fieldVale)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(fieldName, fieldVale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Filter provides a mock function with given fields: filters, output
func (_m *Database) Filter(filters map[string]string, output interface{}) error {
	ret := _m.Called(filters, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string, interface{}) error); ok {
		r0 = rf(filters, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: fieldName, fieldVale, output
func (_m *Database) Get(fieldName string, fieldVale string, output interface{}) error {
	ret := _m.Called(fieldName, fieldVale, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(fieldName, fieldVale, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: fieldName, fieldVale, content
func (_m *Database) Update(fieldName string, fieldVale string, content interface{}) (bool, error) {
	ret := _m.Called(fieldName, fieldVale, content)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, interface{}) bool); ok {
		r0 = rf(fieldName, fieldVale, content)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(fieldName, fieldVale, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
