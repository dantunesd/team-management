// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	usecase "team-management/members/usecase"

	mock "github.com/stretchr/testify/mock"
)

// GetMemberUseCase is an autogenerated mock type for the GetMemberUseCase type
type GetMemberUseCase struct {
	mock.Mock
}

// Handle provides a mock function with given fields: id
func (_m *GetMemberUseCase) Handle(id string) (*usecase.GetMemberOutput, error) {
	ret := _m.Called(id)

	var r0 *usecase.GetMemberOutput
	if rf, ok := ret.Get(0).(func(string) *usecase.GetMemberOutput); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.GetMemberOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetMemberUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetMemberUseCase creates a new instance of GetMemberUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetMemberUseCase(t mockConstructorTestingTNewGetMemberUseCase) *GetMemberUseCase {
	mock := &GetMemberUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
